/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import {
  useGLTF,
  CurveModifier,
  Text3D,
  CurveModifierRef,
} from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

function CircularText() {
  const textRef = useRef<THREE.Mesh>(null);
  const curvedPoints = [];
  const curvedPoints2 = [];
  const curvedPoints3 = [];
  const radius = 10;
  const segments = 50; // Increase this for smoother curves
  const curveRef = useRef<CurveModifierRef>(null);
  const curveRef2 = useRef<CurveModifierRef>(null);
  const curveRef3 = useRef<CurveModifierRef>(null);

  // every frame, move the sun around the cloud
  useFrame(() => {
    // setTextRotation(prev => new THREE.Euler(0, theta, 0))
    if (curveRef.current) {
      curveRef.current.moveAlongCurve(0.001);
    }
    if (curveRef2.current) {
      curveRef2.current.moveAlongCurve(0.001);
    }
    if (curveRef3.current) {
      curveRef3.current.moveAlongCurve(0.001);
    }
  });
  for (let i = 0; i < segments; i++) {
    const angle = (i / segments) * 2 * Math.PI;
    curvedPoints.push(
      new THREE.Vector3(Math.sin(angle) * radius, 0, -Math.cos(angle) * radius),
    );
    curvedPoints2.push(
      new THREE.Vector3(
        Math.sin(angle + (2 * Math.PI) / 3) * radius,
        0,
        -Math.cos(angle + (2 * Math.PI) / 3) * radius,
      ),
    );
    curvedPoints3.push(
      new THREE.Vector3(
        Math.sin(angle + (4 * Math.PI) / 3) * radius,
        0,
        -Math.cos(angle + (4 * Math.PI) / 3) * radius,
      ),
    );
  }

  return (
    <group>
      {/* <CurveModifier curve={curve} ref={curveRef}> */}
      <Text3D
        ref={textRef}
        font="/fonts/helvetiker_regular.typeface.json" // Make sure to use a valid font path
        size={-1.5}
        bevelEnabled
        bevelThickness={0.05}
        bevelSize={0.01}
        bevelOffset={0}
        bevelSegments={64}
        rotation={[0, 0, Math.PI]} // Rotate the text to correct orientation
      >
        April Clucks
        <meshPhysicalMaterial color="white" reflectivity={10} />
      </Text3D>
      {/* </CurveModifier> */}
    </group>
  );
}

export const MattyText = () => {
  const textRef = useRef<THREE.Mesh>(null);
  // every frame, slightly alter the position and z axis rotation of the text

  useFrame((state, delta) => {
    const t = state.clock.getElapsedTime();
    if (!textRef.current) return;
    textRef.current.position.y =
      textRef.current.position.y + Math.sin((t * 2)) * 0.005;
    textRef.current.rotation.z =
      textRef.current.rotation.z + Math.sin((t * 3)) * 0.001;
  });

  return (
    <group>
      <directionalLight color="white" position={[0, 0, 15]} layers={1} />
      <Text3D
        ref={textRef}
        font="/fonts/helvetiker_regular.typeface.json" // Make sure to use a valid font path
        scale={-0.3}
        bevelEnabled
        bevelThickness={0.05}
        bevelSize={0.01}
        bevelOffset={0}
        bevelSegments={64}
        position={[-1.1, -0.5, 0.3]}
        rotation={[0, 0, Math.PI]} // Rotate the text to correct orientation
      >
        April Clucks
        <meshPhysicalMaterial color="white" reflectivity={10} />
      </Text3D>
    </group>
  );
};

useGLTF.preload("/models/scene-v1.glb");
